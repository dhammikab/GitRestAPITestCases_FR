<html>
<META http-equiv="content-type" content="text/html; charset=utf-8">

<body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" role="banner" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Passer au contenu principal</a><div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Compte</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Param&egrave;tres</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fermez la session</a></div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span></button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../-/-/-/welcome_page.htm" alt="Logo"></a></div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="2" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>espace r&eacute;serv&eacute;</a></li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Compte</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Param&egrave;tres</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fermez la session</a></div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filtre :</span><div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="Tous les fichiers" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">Tous les fichiers</span></button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Rechercher" role="button" tabindex="0"><span class="invisible-label">Soumettre la recherche</span></div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div role="navigation" aria-label="Topic toolbar buttons" class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Naviguez vers l&apos;avant" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Naviguez ensuite" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie print-button" title="Imprimer">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie select-language-button" title="Changez la langue">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Change language">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <ul class="nocontent menu _Skins_SideMenu mc-component" data-mc-is-context-sensitive="True" data-mc-linked-toc="Data/Tocs/Brightspace_Help_TOC.js" data-mc-side-menu="True" data-mc-max-depth="1" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="False" data-mc-include-parent="True" data-mc-toc="True">
                                                    </ul>
                                                </div>
                                                <div class="nocontent">
                                                    <div class="MCBreadcrumbsBox_0 breadcrumbs" role="navigation" aria-label="Breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">Vous &ecirc;tes ici :</span></div>
                                                </div>
                                                <div role="main" id="mc-main-content">
                                                    <h1>Soumettre un devoir</h1>
                                                    <p>L&apos;outil travail vous offre la possibilit&eacute; de soumettre des travaux dans l&apos;environnement d&apos;apprentissage Brightspace, ce qui &eacute;limine le besoin de poster, de t&eacute;l&eacute;copier ou d&apos;envoyer par courriel vos travaux aux charg&eacute;s de cours. Vous n&apos;avez qu&apos;&agrave; t&eacute;l&eacute;verser votre soumission dans le devoir appropri&eacute; et &agrave; la soumettre.</p>
                                                    <h2>Comprendre les dates d&apos;&eacute;ch&eacute;ance et les dates de fin</h2>
                                                    <p class="bodytext">Une date d&apos;&eacute;ch&eacute;ance correspond &agrave; la date limite de soumission d&apos;un travail dans votre cours. Cette date est sp&eacute;cifique aux affectations seulement.</p>
                                                    <p class="bodytext">Les dates de fin sont jointes aux affectations. La date de fin correspond &agrave; la date &agrave; laquelle vous pouvez soumettre une affectation, quelle que soit la date d&apos;&eacute;ch&eacute;ance. Lorsque la date de fin de l&apos;affectation est pass&eacute;e, vous ne pouvez plus la soumettre, quelle que soit la date d&apos;&eacute;ch&eacute;ance de l&apos;affectation.</p>
                                                    <div class="MCDropDown MCDropDown_Closed dropDown"><span class="MCDropDownHead dropDownHead"><a href="#" class="MCDropDownHotSpot dropDownHotspot MCDropDownHotSpot_ MCHotSpotImage" aria-expanded="false"><img class="MCDropDown_Image_Icon" src="../../../Skins/Default/Stylesheets/Images/transparent.gif" height="11" width="16" alt="Montrer" data-mc-alt2="Hide" />Pour soumettre des travaux</a></span><div class="MCDropDownBody dropDownBody">
                                                            <ol class="step">
                                                                <li class="step" value="1">Dans la barre de navigation, cliquez <span class="uicontrol">sur affectations</span>.</li>
                                                                <li class="step" value="2">S&eacute;lectionnez le devoir &agrave; soumettre, <span class="uicontrol">dans la page affectations </span>.</li>
                                                                <li value="3">
                                                                    <p>Suivez les instructions de l&apos;exercice et effectuez l&apos;une des actions suivantes :</p>
                                                                </li>
                                                                <ul>
                                                                    <li>
                                                                        <p>Tapez votre travail directement dans <b>le champ soumission de texte</b> . Lorsque vous avez termin&eacute; votre r&eacute;ponse &eacute;crite, cliquez <b>sur Soumettre</b>.</p>
                                                                    </li>
                                                                    <li class="step">Pour parcourir le fichier que vous souhaitez soumettre, cliquez sur <span class="uicontrol">Ajouter un fichier</span>. Vous pouvez joindre des fichiers &agrave; partir de votre ordinateur local ou de votre dispositif de stockage, d&apos;un casier personnel, d&apos;un casier de groupe ou d&apos;un portfolio num&eacute;rique Brightspace. Entrez tout commentaire que vous d&eacute;sirez soumettre avec le fichier. Cliquez <b>sur Soumettre</b>.</li>
                                                                    <li class="step">Vous pouvez s&eacute;lectionner <span class="uicontrol">Enregistrer le son</span> pour ajouter une r&eacute;troaction. Lorsque vous avez termin&eacute; un enregistrement, cliquez sur<span class="uicontrol"> Ajouter</span>. Entrez tout commentaire que vous d&eacute;sirez soumettre avec le fichier. Cliquez <b>sur Soumettre</b>.</li>
                                                                    <li class="step">Cliquez <b>sur marquer comme termin&eacute;</b> pour indiquer manuellement qu&apos;une t&acirc;che est termin&eacute;e.</li>
                                                                </ul>
                                                                <li class="step" value="4">Si votre formateur a activ&eacute; e-&eacute;valuateur ® Grammar feedback, pour afficher les commentaires grammaticaux sur votre devoir, <b>sur la page Historique des soumissions</b> , cliquez <b>sur le lien Afficher la r&eacute;troaction grammaticale e-&eacute;valuateur®</b> dans <b>la colonne r&eacute;troaction en ligne</b> .<ul><li class="step">Si votre devoir permet plusieurs soumissions, vous pouvez int&eacute;grer toute r&eacute;troaction grammaticale et soumettre de nouveau votre devoir.</li></ul></li>
                                                            </ol>
                                                            <p class="step"><b>Remarques :</b></p>
                                                            <ul>
                                                                <li>Si l&apos;affectation est activ&eacute;e par Turnitin, le fichier que vous avez soumis est pr&eacute;valid&eacute; au moment de la soumission pour s&apos;assurer qu&apos;il respecte les exigences de type et de taille de fichier Turnitin.</li>
                                                                <li>Lorsque GradeMark ou l&apos;option v&eacute;rification d&apos;authenticit&eacute; est activ&eacute;e, vous pouvez afficher <b>votre ID de soumission</b> dans <b>la page Historique de la soumission</b> .</li>
                                                                <li>Selon les r&eacute;glages de votre cours, vous pouvez afficher les rubriques qui servent &agrave; &eacute;valuer votre travail directement dans la page de soumission.</li>
                                                            </ul>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div role="contentinfo" aria-label="D2L legal and trademark information" class="footer center">
                                                    <div class="HomeMasterPageFooter outer-row">
                                                        <div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 8pt;">La famille d&apos;entreprises D2L comprend D2L Corporation, D2L Ltd, D2L Australia Pty Ltd, D2L Europe Ltd, D2L Asia Pte Ltd et D2L Brasil Solu&ccedil;&otilde;es de Tecnologia para Educa&ccedil;&atilde;o Ltda.<br />© 1999-2022 D2L Corporation.<br /><span style="font-size: 10pt;"><span style="font-size: 8pt;">Brightspace, D2L et autres marques (« D2L marques ») sont des marques de commerce de D2L Corporation, enregistr&eacute;es aux &Eacute;tats-Unis et dans d&apos;autres pays. Veuillez visiter </span><a href="http://www.d2l.com/trademarks" style="font-size: 8pt;">le site www.d2l.com/trademarks</a><span style="font-size: 8pt;"> pour obtenir la liste des D2L autres points.</span></span></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a></div>
            </div>
        </div>
    </body>
</html>

