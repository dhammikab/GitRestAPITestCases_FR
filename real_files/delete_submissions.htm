<html>
<META http-equiv="content-type" content="text/html; charset=utf-8">

 <body>
        <div class="foundation-wrap off-canvas-wrapper">
            <div class="off-canvas-wrapper-inner" data-off-canvas-wrapper="">
                <aside class="off-canvas position-right" role="navigation" id="offCanvas" data-off-canvas="" data-position="right" data-mc-ignore="true">
                    <ul class="off-canvas-drilldown vertical menu off-canvas-list" data-drilldown="" data-mc-back-link="Back" data-mc-css-tree-node-expanded="is-drilldown-submenu-parent" data-mc-css-tree-node-collapsed="is-drilldown-submenu-parent" data-mc-css-sub-menu="vertical menu slide-in-right is-drilldown-submenu" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="True" data-mc-include-back="True" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.drilldown" data-mc-toc="True">
                    </ul>
                </aside>
                <div class="off-canvas-content inner-wrap" data-off-canvas-content="">
                    <div>
                        <nav class="title-bar tab-bar" role="banner" data-mc-ignore="true"><a class="skip-to-content fluid-skip showOnFocus" href="#">Passer au contenu principal</a><div class="middle title-bar-section outer-row clearfix">
                                <div class="menu-icon-container relative clearfix">
                                    <div class="central-account-wrapper">
                                        <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Compte</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Param&egrave;tres</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fermez la session</a></div>
                                        </div>
                                    </div>
                                    <button class="menu-icon" aria-label="Show Navigation Panel" data-toggle="offCanvas"><span></span></button>
                                </div>
                            </div>
                            <div class="title-bar-layout outer-row">
                                <div class="logo-wrapper"><a class="logo" href="../../../-/-/-/welcome_page.htm" alt="Logo"></a></div>
                                <div class="navigation-wrapper nocontent">
                                    <ul class="navigation clearfix" role="navigation" data-mc-css-tree-node-has-children="has-children" data-mc-css-sub-menu="sub-menu" data-mc-expand-event="mouseenter" data-mc-top-nav-menu="True" data-mc-max-depth="2" data-mc-include-icon="False" data-mc-include-indicator="False" data-mc-include-children="True" data-mc-include-siblings="True" data-mc-include-parent="True" data-mc-toc="True">
                                        <li class="placeholder" style="visibility:hidden"><a>espace r&eacute;serv&eacute;</a></li>
                                    </ul>
                                </div>
                                <div class="central-account-wrapper">
                                    <div class="central-dropdown"><a class="central-account-drop"><span class="central-account-image"></span><span class="central-account-text">Compte</span></a><div class="central-dropdown-content"><a class="MCCentralLink central-dropdown-content-settings">Param&egrave;tres</a><hr class="central-separator" /><a class="MCCentralLink central-dropdown-content-logout">Fermez la session</a></div>
                                    </div>
                                </div>
                                <div class="nav-search-wrapper">
                                    <div class="nav-search row">
                                        <form class="search" action="#">
                                            <div class="search-bar search-bar-container needs-pie">
                                                <input class="search-field needs-pie" type="search" aria-label="Search Field" placeholder="Search" />
                                                <div class="search-filter-wrapper"><span class="invisible-label" id="search-filters-label">Filtre :</span><div class="search-filter" aria-haspopup="true" aria-controls="sf-content" aria-expanded="false" aria-label="Search Filter" title="Tous les fichiers" role="button" tabindex="0">
                                                    </div>
                                                    <div class="search-filter-content" id="sf-content">
                                                        <ul>
                                                            <li>
                                                                <button class="mc-dropdown-item" aria-labelledby="search-filters-label filterSelectorLabel-00001"><span id="filterSelectorLabel-00001">Tous les fichiers</span></button>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                                <div class="search-submit-wrapper" dir="ltr">
                                                    <div class="search-submit" title="Rechercher" role="button" tabindex="0"><span class="invisible-label">Soumettre la recherche</span></div>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </nav>
                    </div>
                    <div class="main-section">
                        <div class="row outer-row sidenav-layout">
                            <nav class="sidenav-wrapper">
                                <div class="sidenav-container">
                                    <ul class="off-canvas-accordion vertical menu sidenav" data-accordion-menu="" data-mc-css-tree-node-expanded="is-accordion-submenu-parent" data-mc-css-tree-node-collapsed="is-accordion-submenu-parent" data-mc-css-sub-menu="vertical menu accordion-menu is-accordion-submenu nested" data-mc-include-indicator="False" data-mc-include-icon="False" data-mc-include-parent-link="False" data-mc-include-back="False" data-mc-defer-expand-event="True" data-mc-expand-event="click.zf.accordionMenu" data-mc-toc="True" data-mc-side-nav-menu="True">
                                    </ul>
                                </div>
                            </nav>
                            <div class="body-container">
                                <div data-mc-content-body="True">
                                    <div class="content">
                                        <div id="contentBody">
                                            <div class="row collapse">
                                                <div role="navigation" aria-label="Topic toolbar buttons" class="sideContent">
                                                    <div class="clearfix">
                                                        <div class="buttons popup-container clearfix topicToolbarProxy _Skins_TopicToolBar mc-component nocontent" style="mc-topic-toolbar-items: ;">
                                                            <div class="button-group-container-left">
                                                                <button class="button needs-pie previous-topic-button" title="Naviguez vers l&apos;avant" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate previous">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie next-topic-button" title="Naviguez ensuite" disabled="true">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Navigate next">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie print-button" title="Imprimer">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Print">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                                <button class="button needs-pie select-language-button" title="Changez la langue">
                                                                    <div>
                                                                        <div role="img" class="button-icon-wrapper" aria-label="Change language">
                                                                            <div class="button-icon"></div>
                                                                        </div>
                                                                    </div>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div role="main" id="mc-main-content">
                                                    <h1>Comment puis-je supprimer une soumission d&apos;affectation?</h1>
                                                    <p class="bodytext">Une fois qu&apos;un fichier a &eacute;t&eacute; soumis avec succ&egrave;s &agrave; un devoir, vous ne pouvez pas le supprimer. Cependant, si vous avez la possibilit&eacute; de soumettre un autre fichier, soumettez-le de nouveau et communiquez avec votre formateur pour l&apos;informer que vous soumettez de nouveau un fichier &agrave; l&apos;exercice.</p>
                                                    <p class="bodytext">Si vous n&apos;&ecirc;tes pas en mesure d&apos;effectuer une autre soumission, communiquez avec votre formateur et dites-lui que vous souhaitez soumettre &agrave; nouveau un fichier dans le devoir.</p>
                                                </div>
                                                <div role="contentinfo" aria-label="D2L legal and trademark information" class="footer center">
                                                    <div class="HomeMasterPageFooter outer-row">
                                                        <div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 10pt;">&#160;</div>
                                                            <div class="footer-links" style="text-align: center;font-size: 8pt;">La famille d&apos;entreprises D2L comprend D2L Corporation, D2L Ltd, D2L Australia Pty Ltd, D2L Europe Ltd, D2L Asia Pte Ltd et D2L Brasil Solu&ccedil;&otilde;es de Tecnologia para Educa&ccedil;&atilde;o Ltda.<br />© 1999-2022 D2L Corporation.<br /><span style="font-size: 10pt;"><span style="font-size: 8pt;">Brightspace, D2L et autres marques (« D2L marques ») sont des marques de commerce de D2L Corporation, enregistr&eacute;es aux &Eacute;tats-Unis et dans d&apos;autres pays. Veuillez visiter </span><a href="http://www.d2l.com/trademarks" style="font-size: 8pt;">le site www.d2l.com/trademarks</a><span style="font-size: 8pt;"> pour obtenir la liste des D2L autres points.</span></span></div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div><a data-close="true"></a></div>
            </div>
        </div>
    </body>
</html>

